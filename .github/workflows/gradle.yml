name: Nginx - Non-stop deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
    - name: Make application.properties
      run: |
        mkdir ./src/main/resources # application.properties파일을 만든적이 없어서 경로가 없기 때문에 만들어주기.
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
        
    ## gradle build
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew bootJar
        
    ## 웹 이미지 빌드 및 도커허브에 push
    - name: web docker build and push
      run: |
        sudo chmod 666 /var/run/docker.sock
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/blue-green . # USERNAME과 REPO는 같은 것이 아닌가? 이해 필요
        docker push ${{ secrets.DOCKER_USERNAME }}/blue-green
        
    ## deploy.sh 파일 서버로 전달하기(복사 후 붙여넣기)
    - name: Send deploy.sh
      uses: appleboy/scp-action@master
      with:
        username: ubuntu
        host: ${{ secrets.HOST }}
        key: ${{ secrets.KEY }}
        port: 22
        source: "./scripts/deploy.sh"
        target: "/home/ubuntu/"
        
    ## 도커 허브에서 jar파일 및 pull후에 컴포즈 up
    - name: Deploy to Dev
      uses: appleboy/ssh-action@master
      with:
        username: ubuntu
        host: ${{ secrets.HOST }}
        key: ${{ secrets.KEY }}
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/blue-green # 일단 USERNAME으로 변경
          chmod 777 ./scripts/deploy.sh
          ./scripts/deploy.sh
          docker image prune -f
